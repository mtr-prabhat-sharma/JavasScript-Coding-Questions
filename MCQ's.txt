1.	What will be the output of the following code ?
console.log(NaN === NaN)
a.	Udefined
b.	False
c.	Will throw an error
d.	True
Ans: False

2.	What will be the output of the following code ?
Console.log(‘5’ - - ‘3’)
a.	‘53’
b.	‘5undefined3’
c.	8
d.	2
Ans: 8
Explanation: The - - part in the middle is interpreted as the subtraction operation with the 
unary negation operator. It's equivalent to 5 - (-3).
The string '5' is implicitly converted to the number 5.
The string '-3' is implicitly converted to the number -3.
The subtraction operation 5 - (-3) results in 8.

3.	What will be the output of the following code?
Console.log(typeof NULL === typeof undefined)
a.	True
b.	False
c.	Error
d.	Undefined
Ans: True
Explanation: Here the typeof NULL = undefined whereas the typeof null = object and
typeof undefined = undefined.

4.	What will be the output of the following code ?
Console.log(3>2>1);
a.	True
b.	False
c.	Error
d.	Undefined
Ans: False
Explanation: 3 > 2 evaluates to true.
The result of true is implicitly coerced to a number when compared with 1. 
In JavaScript, true is coerced to 1, and false is coerced to 0.
So, the expression becomes 1 > 1, which is false.

5.	What will be the output of the following code ?
console.log({}?.constructor);
a.	[object object]
b.	Object
c.	“object”
d.	f Object() { … }
Ans: f Object() { ... }

6.	What will be the output of the following code ?
Console.log(typeof null);
Console.log(null instanceof Object)
a.	‘Object’, true
b.	Undefined, true
c.	Undefined, false
d.	‘object’, false

Ans: 'object', false
Explanation: 
typeof null: The typeof operator in JavaScript returns a string that 
specifies the type of the operand. In the case of null, typeof null returns the 
string 'object'. 

null instanceof Object: The instanceof operator checks if an object is an instance of
a specified object type. In this case, null is not an instance of Object. 
Therefore, the second console.log will output false

7. What will be the output of the following code ?
const a = [{id:1},{id:2}];
a.forEach(val => {
if(val.id === 1) {
	     val = {id: -1111}
};
});
console.log(a);
a.	[{id:1},{id:2}]
b.	[{id: -1111},{id: 2}]
c.	[undefined,{id: 2}]
d.	[{id:1},undefined]

Ans: [{id:1},{id:2}]
Explanation: In the forEach loop, you are iterating over the array a and modifying 
the val variable inside the loop. However, modifying val inside the loop doesn't 
affect the original objects in the array. The modifications are local to the loop and 
do not change the actual objects in the array.


8.	What will the output of following?
‘use strict’;
(function hello() {console.log(this)})();
a.	[object object]
b.	Window
c.	Undefined
d.	{}
Ans: Undefined
Explanation: In strict mode ('use strict';), when a function is invoked as a 
standalone function (not as a method or through the call/apply methods), the this 
value inside the function will be undefined. In the provided code, the IIFE 
(Immediately Invoked Function Expression) is invoked as a standalone function, 
so this inside the function is undefined.

9. console.log(10+20+"abc");
Ans: 30abc
Explanation: First addition and then concatination

10. console.log("abc"+10+20);
Ans: abc1020
Explanation: JavaScript evaluates expressions from left to right. When the + operator is 
used with strings, it concatenates them. So "abc" + 10 results in the string "abc10". 
Then, when "abc10" is concatenated with 20, it's treated as string concatenation, resulting 
in "abc1020".


