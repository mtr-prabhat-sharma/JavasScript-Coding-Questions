Ques 1: What is function currying
Ans 1: Currying in JavaScript is a process in functional programming in which we can
transform a function with multiple arguments into a sequence of nesting functions. 
It returns a new function that expects the next argument inline.

In other words, instead of a function taking all arguments at one time, 
it takes the first one and returns a new function, which takes the second one 
and returns a new function, which takes the third one, and so on, until all 
arguments have been fulfilled.

Foreg:
function sum(a) {
    return (b) => {
        return (c) => {
            return a + b + c;
        }
    }
}
console.log(sum(1)(2)(3));

QUES 2: What are higer order functions ?
ANSWER 2: Higher order functions are those functions that takes another functions
as an arguments(callbacks) or returns another functions.
Foreg: map function
const numbers = [1, 2, 3, 4];
const doubledNumbers = numbers.map(function (number) {
  return number * 2;
});
console.log(doubledNumbers); // Outputs: [2, 4, 6, 8]

QUES 3: How to check  object is empty or not ?
ANS 3:
    1st method - Using Object.keys(yourObjectName) - This is introduced in ES6. This 
    will convert the object keys into array and by checking the length we can check object
    is empty or not.
    For Eg.
    let obj = {name:'Prabhat',age:31};
    let obj1 = {};
    Object.keys(obj) //['name','age']
    Object.keys(obj).length // returns 2
    Object.keys(obj1).length // returns 0

    2nd method - Using for..in loop - We can use this loop with hasOwnProperty to check
    object is empty not.
    For eg.
    let obj = {name:'Prabhat',age:31};
    let obj1 = {};
    const res = (objName) => {
        for(let prop in objName) {
            if(objName.hasOwnProperty(prop)) {
                return true
            }
        }
        return false;
    }
    console.log(res(obj)) //returns true;
    console.log(res(obj2)) //returns false;

    3rd Method - Using JSON.stringify(yourObjectName) - If the object is empty then it
    will return '{}'
    For eg
    let obj1 = {name:'prabhat'};
    let obj2 = {};
    const res = JSON.stringify(obj2);
    if(res === '{}'){
    console.log('object is empty')
    } else {
    console.log("object is not empty");
    }

QUES 4: What is Temporal Deadzone in JavaScript ?
ANS 4: The temporal dead zone (TDZ) is a specific period in the execution of 
JavaScript code where variables declared with let and const exist but cannot 
be accessed or assigned any value. During this phase, accessing or using the 
variable will result in a ReferenceError.
For Eg:
console.log(x); // ReferenceError: Cannot access 'x' before initialization
let x = 10;

QUES 5: What is Object.freeze() method in JavaScript ?
ANS 5: In JavaScript, Object.freeze() is a method that is used to freeze an object. 
When an object is frozen, its properties become read-only, and no new properties can 
be added, modified, or removed. 
For eg:
const myObject = {
  property1: 42,
  property2: 'Hello, World!',
};

// Freeze the object
Object.freeze(myObject);

// Attempt to modify a property
myObject.property1 = 100; // This will not throw an error, but the value won't change

// Attempt to add a new property
myObject.property3 = 'New property'; // This will not throw an error, but the property won't be added

// Attempt to delete a property
delete myObject.property2; // This will not throw an error, but the property won't be deleted

console.log(myObject); // The object remains unchanged

QUES 6: Difference between map,filter and reduce ?
ANS 6: map, filter, and reduce are higher-order functions in JavaScript that operate 
on arrays.
1 - map - 
map transforms each element of an array and produces a new array of the same length.
const numbers = [1, 2, 3, 4];
const doubled = numbers.map((num) => num * 2);
// doubled is now [2, 4, 6, 8]

2 - filter -
filter selects elements from an array that meet a specified condition and produces a new array.
const numbers = [1, 2, 3, 4];
const evens = numbers.filter((num) => num % 2 === 0);
// evens is now [2, 4]

3 - reduce - 
reduce accumulates values from an array into a single result, often used for 
operations like summing or calculating averages.
const numbers = [1, 2, 3, 4];
const sum = numbers.reduce((accumulator, current) => accumulator + current, 0);
// sum is now 10

QUES 7: Difference between slice and splice ?
ANS 7: 
Slice - The slice method is used to extract a portion of an array and return a new 
array without modifying the original array.
const numbers = [1, 2, 3, 4, 5];
const slicedArray = numbers.slice(1, 4);
// slicedArray is [2, 3, 4]
// numbers is still [1, 2, 3, 4, 5]

splice - The splice method is used to change the contents of an array by removing or replacing 
existing elements and/or adding new elements in place.
const num = [1,2,3,4,5,6];
const res = num.splice(1,2);
console.log(num);//1,4,5,6
console.log(res); //2,3

QUES 8: Shallow copy vs Deep copy in JavaScript ?
ANS 8: Shallow copy copies the reference of the array or object so also changes the 
original array/object when any changes are done inside copied array/object.
On the other hand deep copy creates the new reference for the copied array/object.
Ways to do deep copy.
1 - Using JSON.parse and JSON.stringify;
eg;
const originalObj = {name:'Prabhat',address:{zip:1234}};
const copiedObj = JSON.parse(JSON.stringify(originalObj));
copiedObj.address.zip = 11111;
console.log(copiedObj); //{name:'Prabhat',address:{zip:11111}}
console.log(originalObj); // {name:'Prabhat',address:{zip:1234}}